FROM python:3.8.16-alpine3.17
# FROM python:3.8-slim-buster

ENV PYTHONFAULTHANDLER=1 \
    PYTHONHASHSEED=random \
    PYTHONUNBUFFERED=1

WORKDIR /app

# FROM base as builder

ENV PIP_DEFAULT_TIMEOUT=100 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_NO_CACHE_DIR=1 
    # POETRY_VERSION=1.0.5

RUN apt update -y
RUN apt install -y software-properties-common
RUN apt install -y libjpeg-dev zlib1g-dev
# RUN apk add --no-cache gcc libffi-dev musl-dev
# RUN pip install --upgrade setuptools
RUN pip3 install --upgrade pip setuptools wheel
# RUN pip install poetry==1.4.2
# RUN python -m venv /venv
COPY requirements.txt .
# COPY pyproject.toml poetry.lock ./
# RUN poetry export -f requirements.txt | pip install -r /dev/stdin
# RUN apk update && \
#     apk install --no-install-recommends libgomp1 && \
#     pip install --no-cache-dir -r requirements.txt && \
#     apk clean && \
#     rm -rf /var/lib/apt/lists/*
RUN pip3 install --use-pep517 --no-cache-dir -r requirements.txt
COPY . .
# RUN poetry build && pip install dist/*.whl

# FROM base as final

# RUN apk add --no-cache libffi libpq
# COPY --from=builder /venv /venv
EXPOSE 5000
# COPY docker-entrypoint.sh wsgi.py ./
# RUN chmod +x ./docker-entrypoint.sh
# CMD ["./docker-entrypoint.sh"]
CMD ["python", "server.py"]

